// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dinks_server;

#nullable disable

namespace dinks_server.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("dinks_server.Entities.ChatBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("ChatBoards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7d5f96f-61db-49c6-a311-0a6f355f6953"),
                            Description = "Talk about anything pickleball related",
                            Name = "General Discussion"
                        });
                });

            modelBuilder.Entity("dinks_server.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7ccf751-b34c-4de8-922e-f461c83683a8"),
                            CreatedBy = new Guid("0b86a69a-21be-4ecf-bf87-0fe2c960ccd4"),
                            Date = new DateTime(2024, 8, 13, 5, 51, 19, 148, DateTimeKind.Utc).AddTicks(3871),
                            Description = "Annual pickleball tournament",
                            Location = "Location A",
                            Name = "Pickleball Tournament"
                        });
                });

            modelBuilder.Entity("dinks_server.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatBoardId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatBoardId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1333a064-960b-4cd4-947c-706a827421da"),
                            ChatBoardId = new Guid("b7d5f96f-61db-49c6-a311-0a6f355f6953"),
                            Content = "Welcome to the chat!",
                            CreatedAt = new DateTime(2024, 7, 13, 5, 51, 19, 148, DateTimeKind.Utc).AddTicks(3928),
                            UserId = new Guid("0b86a69a-21be-4ecf-bf87-0fe2c960ccd4")
                        });
                });

            modelBuilder.Entity("dinks_server.Entities.Paddle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Details")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PurchaseLink")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.ToTable("Paddles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e184e169-b1aa-4b1b-8f09-d27f61a21054"),
                            Brand = "PickleBrand",
                            Details = "High quality paddle",
                            Name = "Pro Paddle",
                            PurchaseLink = "http://example.com/propaddle"
                        });
                });

            modelBuilder.Entity("dinks_server.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f309f240-b5c5-47d8-9b60-f1d08869e8b0"),
                            Content = "Had a great game today!",
                            CreatedAt = new DateTime(2024, 7, 13, 5, 51, 19, 148, DateTimeKind.Utc).AddTicks(3912),
                            UserId = new Guid("0b86a69a-21be-4ecf-bf87-0fe2c960ccd4")
                        });
                });

            modelBuilder.Entity("dinks_server.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Interests")
                        .HasColumnType("text");

                    b.Property<string>("Links")
                        .HasColumnType("text");

                    b.Property<float>("SkillLevel")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31f7b150-3bb8-4c0e-bec8-398ab7bb2c28"),
                            Bio = "Hello, I'm John!",
                            Icon = "url-to-icon",
                            Interests = "Pickleball",
                            Links = "http://example.com/johndoe",
                            SkillLevel = 3.5f,
                            UserId = new Guid("0b86a69a-21be-4ecf-bf87-0fe2c960ccd4")
                        },
                        new
                        {
                            Id = new Guid("7c6bb7f3-336c-408c-a9c4-13ee34d1132e"),
                            Bio = "Hello, I'm Jane!",
                            Icon = "url-to-icon",
                            Interests = "Pickleball",
                            Links = "http://example.com/janedoe",
                            SkillLevel = 4f,
                            UserId = new Guid("cbbabb75-15aa-484a-97ef-4016bfd0290e")
                        });
                });

            modelBuilder.Entity("dinks_server.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PaddleId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PaddleId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("276cfead-44c9-4f9e-869c-445d10fd57a3"),
                            CreatedAt = new DateTime(2024, 7, 13, 5, 51, 19, 148, DateTimeKind.Utc).AddTicks(3944),
                            PaddleId = new Guid("e184e169-b1aa-4b1b-8f09-d27f61a21054"),
                            Rating = 5,
                            ReviewText = "Excellent paddle!",
                            UserId = new Guid("0b86a69a-21be-4ecf-bf87-0fe2c960ccd4")
                        });
                });

            modelBuilder.Entity("dinks_server.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b86a69a-21be-4ecf-bf87-0fe2c960ccd4"),
                            CreatedAt = new DateTime(2024, 7, 13, 5, 51, 19, 148, DateTimeKind.Utc).AddTicks(3715),
                            DateOfBirth = new DateTime(1994, 7, 13, 5, 51, 19, 148, DateTimeKind.Utc).AddTicks(3716),
                            Email = "test1@example.com",
                            IsActive = true,
                            PasswordHash = "hashedpassword",
                            Username = "testuser1"
                        },
                        new
                        {
                            Id = new Guid("cbbabb75-15aa-484a-97ef-4016bfd0290e"),
                            CreatedAt = new DateTime(2024, 7, 13, 5, 51, 19, 148, DateTimeKind.Utc).AddTicks(3726),
                            DateOfBirth = new DateTime(1999, 7, 13, 5, 51, 19, 148, DateTimeKind.Utc).AddTicks(3726),
                            Email = "test2@example.com",
                            IsActive = true,
                            PasswordHash = "hashedpassword",
                            Username = "testuser2"
                        });
                });

            modelBuilder.Entity("dinks_server.Entities.Message", b =>
                {
                    b.HasOne("dinks_server.Entities.ChatBoard", "ChatBoard")
                        .WithMany("Messages")
                        .HasForeignKey("ChatBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dinks_server.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatBoard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dinks_server.Entities.Review", b =>
                {
                    b.HasOne("dinks_server.Entities.Paddle", null)
                        .WithMany("Reviews")
                        .HasForeignKey("PaddleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dinks_server.Entities.ChatBoard", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("dinks_server.Entities.Paddle", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
